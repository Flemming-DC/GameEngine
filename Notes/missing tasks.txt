
diverse
	move openGL errorhandling into rendering folder thereby seperating it from general tools
	buy old used mac, linux, xbox and playstation
	update view-area on window resize
	introduce check for unwanted destruction
	evt. replace openGL destructors with cleanup functions
	check realease of openGL resources
	evt. check untimely calls to component destructors
	evt. create the initializable class and let assets and components inhirit from it. 

components & gameobjects
	separate gamelogic out
	updatable
	handle activation
	asset instances / prefabs (implement them by function calls that create an entity)
	component destroyed warning
	evt. introduce name and component statistics that can be used to search for entities

dynamics
	startObject, endObject, update, enable, disable, startScene, endScene, starGame, endGame

collision
	use constrained proportions for circleCollider. this proporty is set on transform and used
	by circleCollider and Gizmo renderer
	edit colliders

	collision detection
		broad phase: boundingbox trees
	collision solving (aka. interaction)
	evt. drag & friction
	
	easy spawning for testing

	components
		rigidbody
	generate collision data
		normals, velocity, collisionPoint

run function / master loop
read/save files from/to disk
	Load function might make SetByInspector functions unnecessary
	comments in yml files for uuids
	component ordering
	load mesh and parent from id
	get entity by name
	hardcode custom gamelogic
	multiple scenes

headers
	common, tools, rendering
profiler

make 2d game






